hugepages = 100
stats = 1
uuid="b98aeac0-fef1-428f-b0e1-314350d4f4a6"

# Nodi per un test di collegamento
nodes = {
	nodo_villas_lab_b = {
        type = "socket",
        layer = "udp",
        #vectorize = 30,            # Receive and sent 30 samples per message (combining).
        builtin = false,            # By default, all nodes will have a few builtin hooks attached to them.
                                    # When collecting statistics or measurements these are undesired.
        format = {
                        type = "json"
                        indent = 0
                        compact = true
                        ts_received = true
                        ts_origin = false
                        offset = false
                        real_precision = 6
                        sequence = true
        },
        in = {
            address = "*:12003", # FROM VILLAS LAB A
            signals = (
                    { name = "I", unit = "Ampere", type = "complex"}
            )
        },
        out = {
            address = "villas_lab_a:12000",  # TO VILLAS LAB A
            netem = {                   # Network emulation settings
                enabled = false,
                delay = 100000,          # Additional latency in microseconds
                jitter = 30000,          # Jitter in uS
                distribution = "normal", # Distribution of delay: uniform, normal, pareto, paretonormal
                loss = 2,               # Packet loss in percent
                duplicate = 0,          # Duplication in percent
                corrupt = 0             # Corruption in percent
            },
            signals = (
                   { name = "V", unit = "Volt", type = "complex"}
            )
        }
    },
    nodo_dpsim_lab_b = {
        type = "socket",
        layer = "udp",
        #vectorize = 30,            # Receive and sent 30 samples per message (combining).
        builtin = false,            # By default, all nodes will have a few builtin hooks attached to them.
                                    # When collecting statistics or measurements these are undesired.
        format = {
                        type = "json"
                        indent = 0
                        compact = true
                        ts_received = true
                        ts_origin = false
                        offset = false
                        real_precision = 6
                        sequence = true
        },
        in = {
            address = "*:12002", # FROM DPSIM LAB B
            signals = (
                    { name = "V", unit = "Volt", type = "complex"}
            )
        },
        out = {
            address = "dpsim_lab_b:12003",  # TO DPSIM LAB B
            netem = {                   # Network emulation settings
                enabled = false,
                delay = 100000,          # Additional latency in microseconds
                jitter = 30000,          # Jitter in uS
                distribution = "normal", # Distribution of delay: uniform, normal, pareto, paretonormal
                loss = 2,               # Packet loss in percent
                duplicate = 0,          # Duplication in percent
                corrupt = 0             # Corruption in percent
            },
            signals = (
                    { name = "I", unit = "Ampere", type = "complex"}
            )
        }
    },
    file_current = 
    {
        type    = "file",
        
        ### The following settings are specific to the file node-type!! ###
        #uri = "/configs/Logs/log_current_labB_%Y-%m-%d_%H-%M-%S.log",
        uri = "/configs/Logs/log_current_labA.log",
        format = "csv",

        in = {
            epoch_mode = "direct",       # One of: direct (default), wait, relative, absolute
            epoch = 0,                   # The interpretation of this value depends on epoch_mode (default is 0).
                                        # Consult the documentation of a full explanation

            rate = 0,                   # A constant rate at which the lines of the input files should be read
                                        # A missing or zero value will use the timestamp in the first column
                                        # of the file to determine the pause between consecutive lines.
            eof = "rewind",              # Rewind the file and start from the beginning.

            buffer_size = 0             # Creates a stream buffer if value is positive
        },
        out = {
            flush = true,              # Flush or upload contents of the file every time new samples are sent.
            buffer_size = 1,            # Creates a stream buffer if value is positive
            signals = (
                { name = "I", unit = "Ampere", type = "complex"}
            )
        }
    },
    file_voltage = 
    {
        type    = "file",
        
        ### The following settings are specific to the file node-type!! ###
        #uri = "/configs/Logs/log_voltage_labB_%Y-%m-%d_%H-%M-%S.log",
        uri = "/configs/Logs/log_voltage_labA.log",
        format = "csv",

        in = {
            epoch_mode = "direct",       # One of: direct (default), wait, relative, absolute
            epoch = 0,                   # The interpretation of this value depends on epoch_mode (default is 0).
                                        # Consult the documentation of a full explanation

            rate = 0,                    # A constant rate at which the lines of the input files should be read
                                        # A missing or zero value will use the timestamp in the first column
                                        # of the file to determine the pause between consecutive lines.
            eof = "rewind",              # Rewind the file and start from the beginning.

            buffer_size = 0,             # Creates a stream buffer if value is positive
        },
        out = {
            flush = true,               # Flush or upload contents of the file every time new samples are sent.
            buffer_size = 1,            # Creates a stream buffer if value is positive
            signals = (
                    { name = "V", unit = "Volt", type = "complex"}
            )
        }
    }
}